{"version":3,"sources":["components/Answer.js","components/Question.js","components/QuestionList.js","App.js","serviceWorker.js","index.js"],"names":["Answer","state","checked","color","onChangeCheck","e","target","setState","PubSub","subscribe","props","answer","corrects","includes","key","this","spanClass","className","style","type","onChange","text","React","Component","Question","question","index","answers","map","QuestionList","checkAnswer","publish","makeAllQuestions","questions","Object","values","ooad","value","push","dataSet","totalQuestions","length","pageSize","pagesCount","Math","ceil","currentPage","preventDefault","slice","i","Button","variant","onClick","Pagination","aria-label","PaginationItem","disabled","PaginationLink","handleClick","previous","href","Array","page","active","next","App","Container","Jumbotron","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60414b25.chunk.js","sourcesContent":["import React from 'react'\nimport PubSub from \"pubsub-js\";\n\n\nclass Answer extends React.Component {\n    state = {\n        checked: false,\n        color: '#333'\n    };\n\n    componentDidMount() {\n        PubSub.subscribe('SUMMIT_ANSWER', () => {\n            const {checked} = this.state;\n            const {answer, corrects} = this.props;\n\n            if (checked && corrects.includes(answer.key)) {\n                this.setState({color: 'blue'})\n            }\n            else if(!checked && corrects.includes(answer.key)){\n                this.setState({color: 'red'})\n            }\n            else\n                this.setState({color: '#333'})\n        })\n    }\n\n    onChangeCheck = (e) => {\n        const {checked} = e.target;\n        this.setState({checked})\n    };\n\n    render() {\n        const {answer} = this.props;\n        const {checked, color} = this.state;\n\n        const spanClass = checked ? 'checked' : '';\n\n        return (\n            <div className=\"Answer form-check\" style={{color}}>\n                <label className=\"form-check-label\">\n                    <div className=\"uniform-checker\">\n                        <span className={spanClass}>\n                            <input type=\"checkbox\" className=\"form-check-input-styled\" checked={checked}\n                                   onChange={this.onChangeCheck}/>\n                            {answer.text}\n                        </span>\n                    </div>\n                </label>\n            </div>\n        );\n    }\n}\n\nexport default Answer","import React, {\n    Component\n} from 'react';\n\nimport Answer from \"./Answer\";\n\nclass Question extends Component {\n\n    render() {\n        const {question, index} = this.props;\n        const answers = question[\"answers\"];\n        // const answers = question.answers;\n        // const answers = question[\"answers\"].sort(() => 0.5 - Math.random());\n        return (\n            <div className= \"question\">\n                <div className=\"form-group pt-2\">\n                    <label className=\"font-weight-seminole\"><strong>{index + 1}. {question[\"cont\"]}</strong></label>\n                    {\n                        answers.map((answer, index) =>{\n                            return <Answer key={answer.key} answer={answer}\n                                            corrects={question.corrects}  index={index}/>\n                        })\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Question;","import React, {Component} from 'react';\n\nimport {Button} from \"react-bootstrap\";\n\nimport Question from \"./Question\";\n\nimport PubSub from \"pubsub-js\";\n\nimport ooad from \"../questions/ooad/ooad\";\n\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\n\nclass QuestionList extends Component{\n    constructor() {\n        super();\n\n        this.dataSet = this.makeAllQuestions();\n        this.totalQuestions = this.dataSet.length;\n        this.pageSize = typeof this.pageSize === \"number\" ? this.pageSize : 15;\n        this.pagesCount = Math.ceil(this.totalQuestions / this.pageSize);\n\n        this.state = {currentPage: 0};\n    }\n\n    handleClick(e, index) {\n        e.preventDefault();\n        this.setState({currentPage: index});\n    }\n    checkAnswer = () => {\n        PubSub.publish(\"SUMMIT_ANSWER\", 'submit_answer')\n    };\n\n    makeAllQuestions = () => {\n        const questions = [];\n        for (let value of Object.values(ooad)) {\n            questions.push(...value)\n        }\n        return questions\n    };\n\n    render() {\n        // const questions = this.makeAllQuestions();\n        const { currentPage } = this.state;\n        return (\n            <div className=\"questions\">\n\n                {\n                    this.dataSet.slice(currentPage * this.pageSize, (currentPage + 1) * this.pageSize)\n                    .map((question, i) => {\n                            return (\n                                <Question\n                                    key={i}\n                                    question={question}\n                                    index={i}\n                                />\n                            )\n                        })\n                }\n                <Button variant=\"primary\" onClick={this.checkAnswer}>Submit</Button>\n                <hr />\n\n                <div className=\"pagination-wrapper\">\n                    <Pagination aria-label=\"Page navigation example\">\n                        <PaginationItem disabled={currentPage <= 0}>\n                            <PaginationLink\n                                onClick={e => this.handleClick(e, currentPage - 1)}\n                                previous\n                                href=\"#\"\n                            />\n                        </PaginationItem>\n\n                        {[...Array(this.pagesCount)].map((page, i) =>\n                            <PaginationItem active={i === currentPage} key={i}>\n                                <PaginationLink onClick={e => this.handleClick(e,i)} href=\"#\">\n                                    {i + 1}\n                                </PaginationLink>\n                            </PaginationItem>\n                        )}\n\n                        <PaginationItem disabled={currentPage >= this.pagesCount - 1}>\n                            <PaginationLink\n                                onClick={e => this.handleClick(e, currentPage + 1)}\n                                next\n                                href=\"#\"\n                            />\n                        </PaginationItem>\n\n                    </Pagination>\n                </div>\n\n                {/*<div className=\"questions\">*/}\n                {/*    {*/}\n                {/*        questions.map((question, i) => {*/}\n                {/*            return (*/}\n                {/*                <Question*/}\n                {/*                    key={i}*/}\n                {/*                    question={question}*/}\n                {/*                    index={i}*/}\n                {/*                />*/}\n                {/*            )*/}\n                {/*        })*/}\n                {/*    }*/}\n                {/*    <Button variant=\"primary\" onClick={this.checkAnswer}>Submit</Button>*/}\n                {/*    <hr />*/}\n                {/*</div>*/}\n            </div>\n        );\n    }\n}\n\nexport default QuestionList;\n","import React from 'react';\nimport './App.css';\n\nimport {HashRouter as Router, Route} from 'react-router-dom';\n\nimport {Container, Jumbotron} from \"react-bootstrap\";\n\nimport QuestionList from \"./components/QuestionList\";\n\nimport questions from \"./questions/ooad/ooad\";\n\nfunction App() {\n  return (\n    <Router>\n      <Container>\n        <Jumbotron>\n          <Route path=\"/\" exact component={() => <QuestionList questions={questions} />} />\n        </Jumbotron>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}